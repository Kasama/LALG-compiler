%{
	typedef struct reserved_word {
		char *name;
		char *value;
	} RESERVED_WORD;
%}
%readonly-tables
%struct-type
struct reserved_word
%%
and, "reserved_and"
and_then, "reserved_and_then"
array, "reserved_array"
begin, "reserved_begin"
case, "reserved_case"
class, "reserved_class"
const, "reserved_const"
div, "reserved_div"
do, "reserved_do"
downto, "reserved_downto"
else, "reserved_else"
end, "reserved_end"
file, "reserved_file"
for, "reserved_for"
function, "reserved_function"
goto, "reserved_goto"
if, "reserved_if"
in, "reserved_in"
label, "reserved_label"
list, "reserved_list"
mod, "reserved_mod"
nil, "reserved_nil"
not, "reserved_not"
object, "reserved_object"
of, "reserved_of"
or, "reserved_or"
or_else, "reserved_or_else"
otherwise, "reserved_otherwise"
packed, "reserved_packed"
procedure, "reserved_procedure"
program, "reserved_program"
record, "reserved_record"
repeat, "reserved_repeat"
set, "reserved_set"
shl, "reserved_shl"
shr, "reserved_shr"
then, "reserved_then"
to, "reserved_to"
type, "reserved_type"
until, "reserved_until"
var, "reserved_var"
while, "reserved_while"
with, "reserved_with"
xor, "reserved_xor"
integer, "reserved_type_integer"
real, "reserved_type_real"
"<=", "symbol_less_than_eq"
">=", "symbol_greater_than_eq"
"<>", "symbol_different"
":=", "symbol_assign"
"+", "symbol_plus"
"-", "symbol_minus"
"*", "symbol_times"
"/", "symbol_div"
":", "symbol_colon"
";", "symbol_semicolon"
".", "symbol_period"
",", "symbol_comma"
"[", "symbol_sbracked_open"
"]", "symbol_sbracked_close"
"(", "symbol_parens_open"
")", "symbol_parens_close"
">", "symbol_greater_than"
"<", "symbol_less_than"
